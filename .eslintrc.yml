parser: '@typescript-eslint/parser'
parserOptions:
  sourceType: module

env:
  commonjs: true
  browser: true
  es6: true

rules:
  array-element-newline: [1, 'consistent']
  array-bracket-newline: [1, 'consistent']
  array-bracket-spacing:
    [
      1,
      'always',
      { singleValue: false, objectsInArrays: false, arraysInArrays: false },
    ]
  arrow-parens: [1, 'as-needed', { requireForBlockBody: true }]
  arrow-spacing: [1, { before: true, after: true }]
  block-scoped-var: 'error'
  block-spacing: [1, 'always']
  brace-style: [1, '1tbs', { allowSingleLine: true }]
  comma-dangle: [1, 'always-multiline']
  comma-spacing: [1, { before: false, after: true }]
  comma-style: [1, 'last']
  computed-property-spacing: [1, 'never']
  constructor-super: 'error'
  curly: [1, 'all']
  dot-notation: 'warn'
  for-direction: 'error'
  func-call-spacing: [1, 'never']
  function-paren-newline: [1, 'consistent']
  getter-return: 'error'
  implicit-arrow-linebreak: [1, 'beside']
  indent: [1, 2, { MemberExpression: 0, SwitchCase: 1 }]
  key-spacing: [1, { mode: 'strict', beforeColon: false, afterColon: true }]
  keyword-spacing: [1, { before: true, after: true }]
  linebreak-style: [1, 'unix']
  lines-between-class-members: [1, 'always', { exceptAfterSingleLine: true }]
  new-cap:
    [
      2,
      {
        capIsNewExceptions:
          [
            'Pipe',
            'Component',
            'Directive',
            'Injectable',
            'ViewChild',
            'NgModule',
            'Input',
            'Output',
            'HostBinding',
            'HostListener',
            'Inject',
          ],
      },
    ]
  no-console: 'error'
  no-debugger: 'error'
  no-dupe-args: 'error'
  no-dupe-class-members: 'error'
  no-dupe-keys: 'error'
  no-duplicate-case: 'error'
  no-else-return: [1, { allowElseIf: false }]
  no-empty-character-class: 'error'
  no-eval: [2, { allowIndirect: false }]
  no-ex-assign: 'error'
  no-extra-bind: 'warn'
  no-extra-boolean-cast: 'error'
  no-extra-label: 'warn'
  no-extra-parens: [1, 'functions']
  no-extra-semi: 'warn'
  no-floating-decimal: 'warn'
  no-func-assign: 'error'
  no-global-assign: 'error'
  no-implied-eval: 'error'
  no-inner-declarations: 'error'
  no-invalid-regexp: [2, { allowConstructorFlags: ['u', 'y'] }]
  no-lonely-if: 'warn'
  no-misleading-character-class: 'error'
  no-multi-spaces: 'warn'
  no-multiple-empty-lines: [1, { max: 3 }]
  no-new-func: 'error'
  no-new-wrappers: 'error'
  no-obj-calls: 'error'
  no-param-reassign: 'error'
  no-redeclare: [2, { builtinGlobals: true }]
  no-regex-spaces: 'warn'
  no-script-url: 'error'
  no-self-compare: 'error'
  no-shadow-restricted-names: 'error'
  no-sparse-arrays: 'error'
  no-template-curly-in-string: 'error'
  no-this-before-super: 'error'
  no-throw-literal: 'error'
  no-undef: 'warn'
  no-undef-init: 'warn'
  no-unmodified-loop-condition: 'error'
  no-unneeded-ternary: 'warn'
  no-unsafe-finally: 'warn'
  no-unsafe-negation: 'warn'
  no-unused-labels: 'warn'
  no-use-before-define: [1, { functions: true, classes: true, variables: true }]
  no-var: 'error'
  no-whitespace-before-property: 'warn'
  no-with: 'error'
  object-curly-newline: [1, { multiline: true, consistent: true }]
  object-curly-spacing: [1, 'always']
  one-var: [1, 'never']
  operator-linebreak: [1, 'before']
  padded-blocks: [1, { blocks: 'never' }]
  prefer-arrow-callback: 'warn'
  prefer-template: 'error'
  quote-props: [1, 'consistent-as-needed']
  quotes: [1, 'single']
  rest-spread-spacing: [1, 'never']
  semi-spacing: [1, { before: false, after: true }]
  semi: [1, 'always']
  space-before-function-paren: [1, 'never']
  space-in-parens: [1, 'never']
  space-infix-ops: [1, { int32Hint: true }]
  space-unary-ops: [1, { words: true, nonwords: false }]
  switch-colon-spacing: [1, { before: false, after: true }]
  template-curly-spacing: [1, 'never']
  unicode-bom: [1, 'never']
  use-isnan: 'error'
  wrap-iife: [1, 'inside']
  yoda: 'warn'
